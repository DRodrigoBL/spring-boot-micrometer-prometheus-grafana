 #my global config
global:
  scrape_interval:     5s # Set the scrape interval to every 5 seconds. Default is every 1 minute.
  evaluation_interval: 5s # Evaluate rules every 5 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'rest-api-monitoring'
    metrics_path: '/actuator/prometheus'
    static_configs:
      - targets: ['rest-api-monitoring:8080']

#global:
#  scrape_interval:     15s # El intervalo en el que se traerá las métricas
#  evaluation_interval: 15s # Evaluará las reglas cada 15 segundos, por defecto es cada minuto
## Se cargarán las reglas una vez y cada tiempo establecido en evaluation-interval serán analizadas
#rule_files:
## - "rule_A.yml"
## - "rule_B.yml"
## Una configuración para poder capturar(scrape) las métricas tiene un endpoint:
#scrape_configs:
#  # El nombre del job se añade como como una etiqueta.
#  - job_name: 'prometheus'
#    # Sobreescribimos el scrape global por defecto cada 5 segundos.
#    scrape_interval: 5s
#    static_configs:
#      - targets: ['127.0.0.1:9090']
#      # Detalles para conectar Prometheus con Spring Boot Actuator y poder capturar las métricas
#      - job_name: 'spring-actuator'
#
#    # Endpoint de actuator.
#    metrics_path: '/actuator/prometheus'
#    #el endpoint final, en nuestro caso usamos docker, pero sino usas docker será localhost por ejemplo, o el HOST en el que lo tengas configurado
#    #localhost sino se usa DOCKER
#    static_configs:
#      - targets: ['localhost:8080']